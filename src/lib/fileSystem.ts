export interface FileNode {
  name: string;
  type: 'file' | 'folder';
  content?: string;
  children?: FileNode[];
  path: string;
}

export const defaultFileSystem: FileNode = {
  name: 'project',
  type: 'folder',
  path: '/',
  children: [
    {
      name: 'src',
      type: 'folder',
      path: '/src',
      children: [
        {
          name: 'index.html',
          type: 'file',
          path: '/src/index.html',
          content: `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Generated Project</title>
  <style>
    body {
      font-family: system-ui, -apple-system, sans-serif;
      margin: 0;
      padding: 20px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .container {
      text-align: center;
      max-width: 600px;
    }
    h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
    }
    p {
      font-size: 1.2rem;
      opacity: 0.9;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Welcome! ðŸš€</h1>
    <p>Your AI-generated project will appear here. Start by describing your idea in the chat panel.</p>
  </div>
</body>
</html>`
        },
        {
          name: 'App.tsx',
          type: 'file',
          path: '/src/App.tsx',
          content: `import React from 'react';

function App() {
  return (
    <div className="app">
      <h1>Hello, World!</h1>
      <p>This is your generated React app.</p>
    </div>
  );
}

export default App;`
        },
        {
          name: 'styles.css',
          type: 'file',
          path: '/src/styles.css',
          content: `* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: system-ui, -apple-system, sans-serif;
  line-height: 1.6;
}`
        }
      ]
    },
    {
      name: 'components',
      type: 'folder',
      path: '/components',
      children: []
    },
    {
      name: 'assets',
      type: 'folder',
      path: '/assets',
      children: []
    },
    {
      name: 'config',
      type: 'folder',
      path: '/config',
      children: [
        {
          name: 'config.json',
          type: 'file',
          path: '/config/config.json',
          content: `{
  "projectName": "AI Generated Project",
  "version": "1.0.0"
}`
        }
      ]
    },
    {
      name: 'README.md',
      type: 'file',
      path: '/README.md',
      content: `# AI Generated Project

This project was generated by the AI Coding Studio.

## Getting Started

Edit the files to customize your project.`
    }
  ]
};

export function findFileByPath(root: FileNode, path: string): FileNode | null {
  if (root.path === path) return root;
  
  if (root.children) {
    for (const child of root.children) {
      const found = findFileByPath(child, path);
      if (found) return found;
    }
  }
  
  return null;
}

export function updateFileContent(root: FileNode, path: string, content: string): FileNode {
  if (root.path === path) {
    return { ...root, content };
  }
  
  if (root.children) {
    return {
      ...root,
      children: root.children.map(child => updateFileContent(child, path, content))
    };
  }
  
  return root;
}

export function flattenFiles(node: FileNode, files: FileNode[] = []): FileNode[] {
  if (node.type === 'file') {
    files.push(node);
  }
  
  if (node.children) {
    node.children.forEach(child => flattenFiles(child, files));
  }
  
  return files;
}
